// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BasicLeaderlessReplicatorClient is the client API for BasicLeaderlessReplicator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BasicLeaderlessReplicatorClient interface {
	// Called on node X when some node Y is replicating a key to X.
	//
	// If the given timestamped KV is behind that stored on X, it is not accepted, and instead,
	// a more up-to-date timestamped KV pair is returned.
	HandlePeerWrite(ctx context.Context, in *ResolvableKV, opts ...grpc.CallOption) (*HandlePeerWriteReply, error)
	// Returns the given timestamped KV for the given key. Called when a node is trying to do a
	// quorum read for the given key.
	HandlePeerRead(ctx context.Context, in *Key, opts ...grpc.CallOption) (*HandlePeerReadReply, error)
}

type basicLeaderlessReplicatorClient struct {
	cc grpc.ClientConnInterface
}

func NewBasicLeaderlessReplicatorClient(cc grpc.ClientConnInterface) BasicLeaderlessReplicatorClient {
	return &basicLeaderlessReplicatorClient{cc}
}

func (c *basicLeaderlessReplicatorClient) HandlePeerWrite(ctx context.Context, in *ResolvableKV, opts ...grpc.CallOption) (*HandlePeerWriteReply, error) {
	out := new(HandlePeerWriteReply)
	err := c.cc.Invoke(ctx, "/proto.BasicLeaderlessReplicator/HandlePeerWrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicLeaderlessReplicatorClient) HandlePeerRead(ctx context.Context, in *Key, opts ...grpc.CallOption) (*HandlePeerReadReply, error) {
	out := new(HandlePeerReadReply)
	err := c.cc.Invoke(ctx, "/proto.BasicLeaderlessReplicator/HandlePeerRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasicLeaderlessReplicatorServer is the server API for BasicLeaderlessReplicator service.
// All implementations must embed UnimplementedBasicLeaderlessReplicatorServer
// for forward compatibility
type BasicLeaderlessReplicatorServer interface {
	// Called on node X when some node Y is replicating a key to X.
	//
	// If the given timestamped KV is behind that stored on X, it is not accepted, and instead,
	// a more up-to-date timestamped KV pair is returned.
	HandlePeerWrite(context.Context, *ResolvableKV) (*HandlePeerWriteReply, error)
	// Returns the given timestamped KV for the given key. Called when a node is trying to do a
	// quorum read for the given key.
	HandlePeerRead(context.Context, *Key) (*HandlePeerReadReply, error)
	mustEmbedUnimplementedBasicLeaderlessReplicatorServer()
}

// UnimplementedBasicLeaderlessReplicatorServer must be embedded to have forward compatible implementations.
type UnimplementedBasicLeaderlessReplicatorServer struct {
}

func (UnimplementedBasicLeaderlessReplicatorServer) HandlePeerWrite(context.Context, *ResolvableKV) (*HandlePeerWriteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlePeerWrite not implemented")
}
func (UnimplementedBasicLeaderlessReplicatorServer) HandlePeerRead(context.Context, *Key) (*HandlePeerReadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlePeerRead not implemented")
}
func (UnimplementedBasicLeaderlessReplicatorServer) mustEmbedUnimplementedBasicLeaderlessReplicatorServer() {
}

// UnsafeBasicLeaderlessReplicatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasicLeaderlessReplicatorServer will
// result in compilation errors.
type UnsafeBasicLeaderlessReplicatorServer interface {
	mustEmbedUnimplementedBasicLeaderlessReplicatorServer()
}

func RegisterBasicLeaderlessReplicatorServer(s grpc.ServiceRegistrar, srv BasicLeaderlessReplicatorServer) {
	s.RegisterService(&BasicLeaderlessReplicator_ServiceDesc, srv)
}

func _BasicLeaderlessReplicator_HandlePeerWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolvableKV)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicLeaderlessReplicatorServer).HandlePeerWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BasicLeaderlessReplicator/HandlePeerWrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicLeaderlessReplicatorServer).HandlePeerWrite(ctx, req.(*ResolvableKV))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasicLeaderlessReplicator_HandlePeerRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicLeaderlessReplicatorServer).HandlePeerRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BasicLeaderlessReplicator/HandlePeerRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicLeaderlessReplicatorServer).HandlePeerRead(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

// BasicLeaderlessReplicator_ServiceDesc is the grpc.ServiceDesc for BasicLeaderlessReplicator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BasicLeaderlessReplicator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BasicLeaderlessReplicator",
	HandlerType: (*BasicLeaderlessReplicatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandlePeerWrite",
			Handler:    _BasicLeaderlessReplicator_HandlePeerWrite_Handler,
		},
		{
			MethodName: "HandlePeerRead",
			Handler:    _BasicLeaderlessReplicator_HandlePeerRead_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/basic_leaderless.proto",
}
