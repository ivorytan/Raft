// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PartitionerClient is the client API for Partitioner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartitionerClient interface {
	Lookup(ctx context.Context, in *PartitionLookupRequest, opts ...grpc.CallOption) (*PartitionLookupReply, error)
	RegisterReplicaGroup(ctx context.Context, in *RegisterReplicaGroupRequest, opts ...grpc.CallOption) (*RegisterReplicaGroupReply, error)
	UnregisterReplicaGroup(ctx context.Context, in *UnregisterReplicaGroupRequest, opts ...grpc.CallOption) (*UnregisterReplicaGroupReply, error)
}

type partitionerClient struct {
	cc grpc.ClientConnInterface
}

func NewPartitionerClient(cc grpc.ClientConnInterface) PartitionerClient {
	return &partitionerClient{cc}
}

func (c *partitionerClient) Lookup(ctx context.Context, in *PartitionLookupRequest, opts ...grpc.CallOption) (*PartitionLookupReply, error) {
	out := new(PartitionLookupReply)
	err := c.cc.Invoke(ctx, "/proto.Partitioner/Lookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionerClient) RegisterReplicaGroup(ctx context.Context, in *RegisterReplicaGroupRequest, opts ...grpc.CallOption) (*RegisterReplicaGroupReply, error) {
	out := new(RegisterReplicaGroupReply)
	err := c.cc.Invoke(ctx, "/proto.Partitioner/RegisterReplicaGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionerClient) UnregisterReplicaGroup(ctx context.Context, in *UnregisterReplicaGroupRequest, opts ...grpc.CallOption) (*UnregisterReplicaGroupReply, error) {
	out := new(UnregisterReplicaGroupReply)
	err := c.cc.Invoke(ctx, "/proto.Partitioner/UnregisterReplicaGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartitionerServer is the server API for Partitioner service.
// All implementations must embed UnimplementedPartitionerServer
// for forward compatibility
type PartitionerServer interface {
	Lookup(context.Context, *PartitionLookupRequest) (*PartitionLookupReply, error)
	RegisterReplicaGroup(context.Context, *RegisterReplicaGroupRequest) (*RegisterReplicaGroupReply, error)
	UnregisterReplicaGroup(context.Context, *UnregisterReplicaGroupRequest) (*UnregisterReplicaGroupReply, error)
	mustEmbedUnimplementedPartitionerServer()
}

// UnimplementedPartitionerServer must be embedded to have forward compatible implementations.
type UnimplementedPartitionerServer struct {
}

func (UnimplementedPartitionerServer) Lookup(context.Context, *PartitionLookupRequest) (*PartitionLookupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (UnimplementedPartitionerServer) RegisterReplicaGroup(context.Context, *RegisterReplicaGroupRequest) (*RegisterReplicaGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterReplicaGroup not implemented")
}
func (UnimplementedPartitionerServer) UnregisterReplicaGroup(context.Context, *UnregisterReplicaGroupRequest) (*UnregisterReplicaGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterReplicaGroup not implemented")
}
func (UnimplementedPartitionerServer) mustEmbedUnimplementedPartitionerServer() {}

// UnsafePartitionerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartitionerServer will
// result in compilation errors.
type UnsafePartitionerServer interface {
	mustEmbedUnimplementedPartitionerServer()
}

func RegisterPartitionerServer(s grpc.ServiceRegistrar, srv PartitionerServer) {
	s.RegisterService(&Partitioner_ServiceDesc, srv)
}

func _Partitioner_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionLookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionerServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Partitioner/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionerServer).Lookup(ctx, req.(*PartitionLookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Partitioner_RegisterReplicaGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReplicaGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionerServer).RegisterReplicaGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Partitioner/RegisterReplicaGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionerServer).RegisterReplicaGroup(ctx, req.(*RegisterReplicaGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Partitioner_UnregisterReplicaGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterReplicaGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionerServer).UnregisterReplicaGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Partitioner/UnregisterReplicaGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionerServer).UnregisterReplicaGroup(ctx, req.(*UnregisterReplicaGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Partitioner_ServiceDesc is the grpc.ServiceDesc for Partitioner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Partitioner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Partitioner",
	HandlerType: (*PartitionerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Lookup",
			Handler:    _Partitioner_Lookup_Handler,
		},
		{
			MethodName: "RegisterReplicaGroup",
			Handler:    _Partitioner_RegisterReplicaGroup_Handler,
		},
		{
			MethodName: "UnregisterReplicaGroup",
			Handler:    _Partitioner_UnregisterReplicaGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/partitioning.proto",
}
