// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReplicatorClient is the client API for Replicator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplicatorClient interface {
	// ReplicateKey can use its own strategy to replicate the given key onto
	// any number of additional nodes. It can be synchronous or asynchronous.
	ReplicateKey(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutReply, error)
	// GetReplicatedKey can use any strategy to read a given key from any
	// set of nodes. The consistency level of the read can be hinted at
	// through the metdata field.
	GetReplicatedKey(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
}

type replicatorClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicatorClient(cc grpc.ClientConnInterface) ReplicatorClient {
	return &replicatorClient{cc}
}

func (c *replicatorClient) ReplicateKey(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutReply, error) {
	out := new(PutReply)
	err := c.cc.Invoke(ctx, "/proto.Replicator/ReplicateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicatorClient) GetReplicatedKey(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := c.cc.Invoke(ctx, "/proto.Replicator/GetReplicatedKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicatorServer is the server API for Replicator service.
// All implementations must embed UnimplementedReplicatorServer
// for forward compatibility
type ReplicatorServer interface {
	// ReplicateKey can use its own strategy to replicate the given key onto
	// any number of additional nodes. It can be synchronous or asynchronous.
	ReplicateKey(context.Context, *PutRequest) (*PutReply, error)
	// GetReplicatedKey can use any strategy to read a given key from any
	// set of nodes. The consistency level of the read can be hinted at
	// through the metdata field.
	GetReplicatedKey(context.Context, *GetRequest) (*GetReply, error)
	mustEmbedUnimplementedReplicatorServer()
}

// UnimplementedReplicatorServer must be embedded to have forward compatible implementations.
type UnimplementedReplicatorServer struct {
}

func (UnimplementedReplicatorServer) ReplicateKey(context.Context, *PutRequest) (*PutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicateKey not implemented")
}
func (UnimplementedReplicatorServer) GetReplicatedKey(context.Context, *GetRequest) (*GetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplicatedKey not implemented")
}
func (UnimplementedReplicatorServer) mustEmbedUnimplementedReplicatorServer() {}

// UnsafeReplicatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplicatorServer will
// result in compilation errors.
type UnsafeReplicatorServer interface {
	mustEmbedUnimplementedReplicatorServer()
}

func RegisterReplicatorServer(s grpc.ServiceRegistrar, srv ReplicatorServer) {
	s.RegisterService(&Replicator_ServiceDesc, srv)
}

func _Replicator_ReplicateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).ReplicateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Replicator/ReplicateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).ReplicateKey(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replicator_GetReplicatedKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).GetReplicatedKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Replicator/GetReplicatedKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).GetReplicatedKey(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Replicator_ServiceDesc is the grpc.ServiceDesc for Replicator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Replicator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Replicator",
	HandlerType: (*ReplicatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReplicateKey",
			Handler:    _Replicator_ReplicateKey_Handler,
		},
		{
			MethodName: "GetReplicatedKey",
			Handler:    _Replicator_GetReplicatedKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/replication.proto",
}
