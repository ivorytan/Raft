// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TapestryRPCClient is the client API for TapestryRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TapestryRPCClient interface {
	// Invoked to find the ID of the root node for a key or a local node ID
	FindRoot(ctx context.Context, in *IdMsg, opts ...grpc.CallOption) (*RootMsg, error)
	// Invoked by a remote node on a root node to register themselves as an
	// advertiser of the key
	Register(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*Ok, error)
	// Invoked to retrieve all nodes that are registered in the local location
	// map for this key
	Fetch(ctx context.Context, in *TapestryKey, opts ...grpc.CallOption) (*FetchedLocations, error)
	// Invoked to add a new node to the Tapestry network
	AddNode(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*Neighbors, error)
	// Invoked to remove a set of nodes from routing table and from the set of
	// backpointers
	RemoveBadNodes(ctx context.Context, in *Neighbors, opts ...grpc.CallOption) (*Ok, error)
	// Invoked to inform nodes of a new node that has joined the Tapestry mesh and
	// to carry out the appropriate transfer of location data
	AddNodeMulticast(ctx context.Context, in *MulticastRequest, opts ...grpc.CallOption) (*Neighbors, error)
	// Invoked to transfer data to a remote node
	Transfer(ctx context.Context, in *TransferData, opts ...grpc.CallOption) (*Ok, error)
	// Invoked to notify a remote node of a backpointer
	AddBackpointer(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*Ok, error)
	// Invoked to notify a remote node of backpointer removal
	RemoveBackpointer(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*Ok, error)
	// Invoked to get all backpointers at a specified level
	GetBackpointers(ctx context.Context, in *BackpointerRequest, opts ...grpc.CallOption) (*Neighbors, error)
	// Invoked to notify a remote node that the local node is leaving the
	// Tapestry mesh
	NotifyLeave(ctx context.Context, in *LeaveNotification, opts ...grpc.CallOption) (*Ok, error)
	// Invoked to fetch the data corresponding to a key from the blob store
	BlobStoreFetch(ctx context.Context, in *TapestryKey, opts ...grpc.CallOption) (*DataBlob, error)
}

type tapestryRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewTapestryRPCClient(cc grpc.ClientConnInterface) TapestryRPCClient {
	return &tapestryRPCClient{cc}
}

func (c *tapestryRPCClient) FindRoot(ctx context.Context, in *IdMsg, opts ...grpc.CallOption) (*RootMsg, error) {
	out := new(RootMsg)
	err := c.cc.Invoke(ctx, "/proto.TapestryRPC/FindRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) Register(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/proto.TapestryRPC/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) Fetch(ctx context.Context, in *TapestryKey, opts ...grpc.CallOption) (*FetchedLocations, error) {
	out := new(FetchedLocations)
	err := c.cc.Invoke(ctx, "/proto.TapestryRPC/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) AddNode(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*Neighbors, error) {
	out := new(Neighbors)
	err := c.cc.Invoke(ctx, "/proto.TapestryRPC/AddNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) RemoveBadNodes(ctx context.Context, in *Neighbors, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/proto.TapestryRPC/RemoveBadNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) AddNodeMulticast(ctx context.Context, in *MulticastRequest, opts ...grpc.CallOption) (*Neighbors, error) {
	out := new(Neighbors)
	err := c.cc.Invoke(ctx, "/proto.TapestryRPC/AddNodeMulticast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) Transfer(ctx context.Context, in *TransferData, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/proto.TapestryRPC/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) AddBackpointer(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/proto.TapestryRPC/AddBackpointer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) RemoveBackpointer(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/proto.TapestryRPC/RemoveBackpointer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) GetBackpointers(ctx context.Context, in *BackpointerRequest, opts ...grpc.CallOption) (*Neighbors, error) {
	out := new(Neighbors)
	err := c.cc.Invoke(ctx, "/proto.TapestryRPC/GetBackpointers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) NotifyLeave(ctx context.Context, in *LeaveNotification, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/proto.TapestryRPC/NotifyLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) BlobStoreFetch(ctx context.Context, in *TapestryKey, opts ...grpc.CallOption) (*DataBlob, error) {
	out := new(DataBlob)
	err := c.cc.Invoke(ctx, "/proto.TapestryRPC/BlobStoreFetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TapestryRPCServer is the server API for TapestryRPC service.
// All implementations must embed UnimplementedTapestryRPCServer
// for forward compatibility
type TapestryRPCServer interface {
	// Invoked to find the ID of the root node for a key or a local node ID
	FindRoot(context.Context, *IdMsg) (*RootMsg, error)
	// Invoked by a remote node on a root node to register themselves as an
	// advertiser of the key
	Register(context.Context, *Registration) (*Ok, error)
	// Invoked to retrieve all nodes that are registered in the local location
	// map for this key
	Fetch(context.Context, *TapestryKey) (*FetchedLocations, error)
	// Invoked to add a new node to the Tapestry network
	AddNode(context.Context, *NodeMsg) (*Neighbors, error)
	// Invoked to remove a set of nodes from routing table and from the set of
	// backpointers
	RemoveBadNodes(context.Context, *Neighbors) (*Ok, error)
	// Invoked to inform nodes of a new node that has joined the Tapestry mesh and
	// to carry out the appropriate transfer of location data
	AddNodeMulticast(context.Context, *MulticastRequest) (*Neighbors, error)
	// Invoked to transfer data to a remote node
	Transfer(context.Context, *TransferData) (*Ok, error)
	// Invoked to notify a remote node of a backpointer
	AddBackpointer(context.Context, *NodeMsg) (*Ok, error)
	// Invoked to notify a remote node of backpointer removal
	RemoveBackpointer(context.Context, *NodeMsg) (*Ok, error)
	// Invoked to get all backpointers at a specified level
	GetBackpointers(context.Context, *BackpointerRequest) (*Neighbors, error)
	// Invoked to notify a remote node that the local node is leaving the
	// Tapestry mesh
	NotifyLeave(context.Context, *LeaveNotification) (*Ok, error)
	// Invoked to fetch the data corresponding to a key from the blob store
	BlobStoreFetch(context.Context, *TapestryKey) (*DataBlob, error)
	mustEmbedUnimplementedTapestryRPCServer()
}

// UnimplementedTapestryRPCServer must be embedded to have forward compatible implementations.
type UnimplementedTapestryRPCServer struct {
}

func (UnimplementedTapestryRPCServer) FindRoot(context.Context, *IdMsg) (*RootMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRoot not implemented")
}
func (UnimplementedTapestryRPCServer) Register(context.Context, *Registration) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedTapestryRPCServer) Fetch(context.Context, *TapestryKey) (*FetchedLocations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedTapestryRPCServer) AddNode(context.Context, *NodeMsg) (*Neighbors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNode not implemented")
}
func (UnimplementedTapestryRPCServer) RemoveBadNodes(context.Context, *Neighbors) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBadNodes not implemented")
}
func (UnimplementedTapestryRPCServer) AddNodeMulticast(context.Context, *MulticastRequest) (*Neighbors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNodeMulticast not implemented")
}
func (UnimplementedTapestryRPCServer) Transfer(context.Context, *TransferData) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedTapestryRPCServer) AddBackpointer(context.Context, *NodeMsg) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBackpointer not implemented")
}
func (UnimplementedTapestryRPCServer) RemoveBackpointer(context.Context, *NodeMsg) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBackpointer not implemented")
}
func (UnimplementedTapestryRPCServer) GetBackpointers(context.Context, *BackpointerRequest) (*Neighbors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackpointers not implemented")
}
func (UnimplementedTapestryRPCServer) NotifyLeave(context.Context, *LeaveNotification) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyLeave not implemented")
}
func (UnimplementedTapestryRPCServer) BlobStoreFetch(context.Context, *TapestryKey) (*DataBlob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlobStoreFetch not implemented")
}
func (UnimplementedTapestryRPCServer) mustEmbedUnimplementedTapestryRPCServer() {}

// UnsafeTapestryRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TapestryRPCServer will
// result in compilation errors.
type UnsafeTapestryRPCServer interface {
	mustEmbedUnimplementedTapestryRPCServer()
}

func RegisterTapestryRPCServer(s grpc.ServiceRegistrar, srv TapestryRPCServer) {
	s.RegisterService(&TapestryRPC_ServiceDesc, srv)
}

func _TapestryRPC_FindRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).FindRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TapestryRPC/FindRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).FindRoot(ctx, req.(*IdMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Registration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TapestryRPC/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).Register(ctx, req.(*Registration))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TapestryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TapestryRPC/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).Fetch(ctx, req.(*TapestryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TapestryRPC/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).AddNode(ctx, req.(*NodeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_RemoveBadNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Neighbors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).RemoveBadNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TapestryRPC/RemoveBadNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).RemoveBadNodes(ctx, req.(*Neighbors))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_AddNodeMulticast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MulticastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).AddNodeMulticast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TapestryRPC/AddNodeMulticast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).AddNodeMulticast(ctx, req.(*MulticastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TapestryRPC/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).Transfer(ctx, req.(*TransferData))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_AddBackpointer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).AddBackpointer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TapestryRPC/AddBackpointer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).AddBackpointer(ctx, req.(*NodeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_RemoveBackpointer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).RemoveBackpointer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TapestryRPC/RemoveBackpointer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).RemoveBackpointer(ctx, req.(*NodeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_GetBackpointers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackpointerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).GetBackpointers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TapestryRPC/GetBackpointers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).GetBackpointers(ctx, req.(*BackpointerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_NotifyLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).NotifyLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TapestryRPC/NotifyLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).NotifyLeave(ctx, req.(*LeaveNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_BlobStoreFetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TapestryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).BlobStoreFetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TapestryRPC/BlobStoreFetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).BlobStoreFetch(ctx, req.(*TapestryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// TapestryRPC_ServiceDesc is the grpc.ServiceDesc for TapestryRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TapestryRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TapestryRPC",
	HandlerType: (*TapestryRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindRoot",
			Handler:    _TapestryRPC_FindRoot_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _TapestryRPC_Register_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _TapestryRPC_Fetch_Handler,
		},
		{
			MethodName: "AddNode",
			Handler:    _TapestryRPC_AddNode_Handler,
		},
		{
			MethodName: "RemoveBadNodes",
			Handler:    _TapestryRPC_RemoveBadNodes_Handler,
		},
		{
			MethodName: "AddNodeMulticast",
			Handler:    _TapestryRPC_AddNodeMulticast_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _TapestryRPC_Transfer_Handler,
		},
		{
			MethodName: "AddBackpointer",
			Handler:    _TapestryRPC_AddBackpointer_Handler,
		},
		{
			MethodName: "RemoveBackpointer",
			Handler:    _TapestryRPC_RemoveBackpointer_Handler,
		},
		{
			MethodName: "GetBackpointers",
			Handler:    _TapestryRPC_GetBackpointers_Handler,
		},
		{
			MethodName: "NotifyLeave",
			Handler:    _TapestryRPC_NotifyLeave_Handler,
		},
		{
			MethodName: "BlobStoreFetch",
			Handler:    _TapestryRPC_BlobStoreFetch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tapestry.proto",
}
